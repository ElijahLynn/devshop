
ARG DEVSHOP_DOCKER_FROM_IMAGE=devshop/server:latest
FROM $DEVSHOP_DOCKER_FROM_IMAGE

# Break Cache
ENV DEVSHOP_DOCKER_FROM_IMAGE ${DEVSHOP_DOCKER_FROM_IMAGE}

# Prints out the OS version.
RUN cat /etc/os-release 2>/dev/null || cat /etc/centos-release

LABEL maintainer="Jon Pugh"

# Any Build args that are desired in this Dockerfile must exist here, even if they are in the main Dockerfile.
ARG ANSIBLE_VERBOSITY=0
ENV ANSIBLE_VERBOSITY ${ANSIBLE_VERBOSITY:-0}

ARG DEVSHOP_USER_UID=1000
ENV DEVSHOP_USER_UID ${DEVSHOP_USER_UID:-1000}

ARG DEVSHOP_PLAYBOOK=docker/playbook.server.yml
ENV DEVSHOP_PLAYBOOK ${DEVSHOP_PLAYBOOK:-docker/playbook.server.yml}
ENV DEVSHOP_PLAYBOOK_PATH="/usr/share/devshop/$DEVSHOP_PLAYBOOK"

# @TODO: Remove ENV vars listed here once it is pushed to main branch in main Dockerfile.
# Until then, this ENV var does not exist in devshop/server:latest
ENV DEVSHOP_TESTS_ASSETS_PATH="/usr/share/devshop/.github/test-assets"
ENV ANSIBLE_BUILD_COMMAND="ansible-playbook $DEVSHOP_PLAYBOOK_PATH \
    -e aegir_user_uid=$DEVSHOP_USER_UID \
    -e aegir_user_gid=$DEVSHOP_USER_UID"

ENV ANSIBLE_CONFIG="/usr/share/devshop/ansible.cfg"
ENV PATH="/usr/share/devshop/bin:$PATH"

# Copy latest DevShop Core to /usr/share/devshop
COPY ./ /usr/share/devshop

# Remove existing devmaster codebase so it will rebuild.
RUN rm -rf /var/aegir

# Install roles inside Docker.
RUN echo "Running: ansible-galaxy install --ignore-errors -r /usr/share/devshop/requirements.yml -p /usr/share/devshop/roles ..."
RUN ansible-galaxy install --ignore-errors -r /usr/share/devshop/requirements.yml -p /usr/share/devshop/roles

# Provision DevShop inside Docker.
RUN echo "Running: $ANSIBLE_BUILD_COMMAND --skip-tags install-devmaster"
RUN $ANSIBLE_BUILD_COMMAND --skip-tags install-devmaster

# @TODO: Remove ENV vars listed here once we confirm new devshop/server:latest works.
RUN mkdir -p $DEVSHOP_TESTS_ASSETS_PATH
RUN chmod 777 $DEVSHOP_TESTS_ASSETS_PATH
